/* DHT-22 sensor with 12c 16x2 LCD with Arduino uno
  2   Temperature   and humidity sensor displayed in LCD
  3   based on: http://www.ardumotive.com/how-to-use-dht-22-sensor-en.html   and
  4   https://www.ardumotive.com/i2clcden.html for the i2c LCD library by Michalis   Vasilakis
  5   Recompile by adhitadhitadhit
  6   Notes: use LCD i2c Library from   link above, i'm not sure why but new Liquidcristal library from Francisco Malpartida   isn't working for me
  7   other thing, check your */

//Libraries
#include   <DHT.h> // sensor library using lib from https://www.ardumotive.com/how-to-use-dht-22-sensor-en.html
#include   <LiquidCrystal_I2C.h> // LCD library using from  https://www.ardumotive.com/i2clcden.html   for the i2c LCD library 
#include   <Wire.h>
#include   <SoftwareSerial.h>


//Constants
#define ARDUINO_RX 5  //should connect to TX of the Serial MP3 Player module
#define ARDUINO_TX 6  //connect to RX of the module
#define rxPin 10      //RX for the GSM module
#define txPin 11      // TX for the GSM module
#define DHT22pin 2     // DHT 22  (AM2302) - pin used for DHT22 
#define CMD_STOP_PLAY     0X16
#define CMD_PLAY          0X0D
#define CMD_SEL_DEV       0X09
#define DEV_TF            0X02

DHT dht(DHT22pin, DHT22);
/*Create software serial pins: pin 10 as RX & 11 as TX
   Connect SIM800L module Rx to Pin 11 (Tx) of Arduino & Tx to Pin 10 (Rx) of Arduino
*/
SoftwareSerial mySerial(rxPin, txPin);
SoftwareSerial mp3(ARDUINO_RX, ARDUINO_TX);
LiquidCrystal_I2C lcd(0x3F, 20, 4); // set the LCD address to 0x27 after finding it from serial monitor (see comment   above) for a 16 chars and 2 line display


//Variables
int ledPin = 4;                // choose the pin for the LED 1
int ledPin2 = 13;               // choose the pin for the LED 2
int inputPin = 3;               // choose the input pin (for PIR sensor)
int pirState = LOW;             // we start, assuming no motion detected
int val = 0;                    // variable for reading the pin status
String phone = "+256776428040";  // contact to recieve sms
float hum;                      //Stores   humidity value
float temp;                      //Stores temperature value
int minHumidity = 65;            //set minimum humidity
int maxTemp = 26;                //set the maximum temperature
static int8_t Send_buf[8] = {0}; // Buffer for Send commands.  // BETTER LOCALLY
static uint8_t ansbuf[10] = {0}; // Buffer for the answers.    // BETTER LOCALLY
String mp3Answer;           // Answer from the MP3.

void setup()
{
 
  pinMode(ledPin, OUTPUT);      // declare LED as output
  pinMode(ledPin2, OUTPUT);      // declare LED 2 as output
  pinMode(inputPin, INPUT);     // declare motion sensor as input
  pinMode(DHT22pin, INPUT);     //declare dht sensor as input
  
  dht.begin();
  delay(2000);

  Serial.begin(9600);
  mySerial.begin(9600);
  Serial.println("Initializing SIM100...");
  delay(1000);
  // Send attention command to check if all fine, it returns OK
  mySerial.println("AT");
  updateSerial();
  mySerial.println("AT+CMGF=1");
  updateSerial();

  mp3.begin(9600);
  delay(500);
  sendCommand(CMD_SEL_DEV, DEV_TF);
  delay(500);

  lcd.init();                      // initialize the   lcd
  lcd.backlight();
  lcd.setBacklight(HIGH);
}

void loop()
{
  val = digitalRead(inputPin);                    // read input value
  
  if (val == HIGH) {                              // check if the input is HIGH
    digitalWrite(ledPin, HIGH);                   // turn LED ON
    Serial.println("Motion detected!");
    sendCommand(CMD_PLAY, 0);
    lcd.setCursor(0, 3);
    lcd.print("motion detected ");
    send_sms("MOTION DETECTED IN THE GRAIN STORE"); //send sms
    
  } 
  else {
    
    digitalWrite(ledPin, LOW); // turn LED OFF
    Serial.println("Motion ended!");
    sendCommand(CMD_STOP_PLAY, 0);
    lcd.setCursor(0, 3);
    lcd.print("                  ");
   
  }

  hum = dht.readHumidity();
  temp = dht.readTemperature();
  Serial.print(hum);
  //Print temp and humidity values to LCD
  lcd.setCursor(0, 0);
  lcd.print("Humidity:   ");
  lcd.print(hum);
  lcd.print(" %");
  lcd.setCursor(0, 1);
  lcd.print("Temp: ");
  lcd.print(temp);
  lcd.println(" c");
  delay(2000); //Delay 2 sec between temperature/humidity check.


  if (hum < minHumidity) {

    digitalWrite(ledPin2, HIGH);  // turn LED ON
    send_sms("HUMIDITY IS CRITICALLY LOW IN THE GRAIN STORE");

  }
  if (temp > maxTemp) {

    digitalWrite(ledPin2, HIGH);  // turn LED ON
    send_sms("TEMPERATURE IS CRITICALLY HIGH IN THE GRAIN STORE");

  }
}

/********************************************************************************/
/*Function: Send command to the MP3                                         */
/*Parameter:-int8_t command                                                     */
/*Parameter:-int16_ dat  parameter for the command                              */

void sendCommand(int8_t command, int16_t dat) {

  delay(20);
  Send_buf[0] = 0x7e;   //
  Send_buf[1] = 0xff;   //
  Send_buf[2] = 0x06;   // Len
  Send_buf[3] = command;//
  Send_buf[4] = 0x01;   // 0x00 NO, 0x01 feedback
  Send_buf[5] = (int8_t)(dat >> 8);  //datah
  Send_buf[6] = (int8_t)(dat);       //datal
  Send_buf[7] = 0xef;   //
  Serial.print("Sending: ");
  for (uint8_t i = 0; i < 8; i++) {

    mp3.write(Send_buf[i]) ;
    Serial.print(sbyte2hex(Send_buf[i]));

  }
  Serial.println();
}

/********************************************************************************/
/*Function: sbyte2hex. Returns a byte data in HEX format.                 */
/*Parameter:- uint8_t b. Byte to convert to HEX.                                */
/*Return: String                                                                */


String sbyte2hex(uint8_t b) {

  String shex;

  shex = "0X";

  if (b < 16) shex += "0";
  shex += String(b, HEX);
  shex += " ";
  return shex;
}
void send_sms(String message) {
  //mySerial.print("AT+CMGS=\phone\"\r");
  mySerial.print("AT+CMGS=\"" + phone + "\"\r");
  updateSerial();

  mySerial.print(message);
  mySerial.write(0x1A);
  updateSerial();
}

// For data transmission from Serial to Software Serial port & vice versa
void updateSerial() {
  delay(500);
  while (Serial.available()) {
    mySerial.write(Serial.read());//Forward what Serial received to Software Serial Port
  }

  while (mySerial.available()) {
    Serial.write(mySerial.read());//Forward what Software Serial received to Serial Port
  }
}
